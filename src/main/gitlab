1. 什么是 Git-LFS？
Large File Storage的缩写，即在 Git 仓中大文件的存储方案，理论上来说 Git 仓库中可以保存任意文件，包括普通的文本文件或二进制文件。但是如果你真的在 Git 仓库中保存了大量的二进制文件（大文件），不用多久就会苦不堪言！因为 Git 克隆是全仓库克隆，越来越庞大的 Git仓库会导致全仓库克隆越来越慢...
为了能够高效地通过 Git 管理二进制文件（大文件），社区出现了一些工具，例如：git-annex。不过 GitHub在2015年4月公布的 Git LFS 解决方案，更优雅地解决了Git管理二进制文件（大文件）的难题。
2. 应用场景 ?
Git 仓库应该只对文本源码进行管理，如果必须存在一些二进制，那么某些场景下可以考虑 LFS:
•	如果二进制文件不是很大、也不会频繁更新，那么可以直接入 Git 仓库
•	如果二进制文件较大（如 >50M），或者有一定频度的更新操作，那么不建议把该二进制文件直接入 Git 仓库，建议使用 Git-LFS 进行托管
•	如果你想进行构建临时结果的存放，不要使用 git 仓库，可以考虑 CMC 等平台。
3. 下载和安装 Git-LFS
3.1 脚本自动安装
目前提供了 自动安装与更新脚本, 可以按照如下方式下载并运行:
3.1.1 Windows
(1) 开始菜单 -> 搜索 Git Bash -> 右键 管理员运行:
 
(2) 输入命令:
curl http://isource-pages.huawei.com/iSource/git-lfs/git_lfs_autoinstall.sh -o git_lfs_autoinstall.sh && sh git_lfs_autoinstall.sh
最后输出 successfully 意味安装成功，可以通过 git lfs version 查看版本信息:
 
3.1.2 linux
执行如下命令:
curl http://isource-pages.huawei.com/iSource/git-lfs/git_lfs_autoinstall.sh -o git_lfs_autoinstall.sh &&
sudo sh git_lfs_autoinstall.sh && (git lfs uninstall; git lfs install)
3.2 手动下载安装
3.2.1 Git-LFS version v2.8.0.p1
说明：
•	修复无法正常扫描 alternates 仓库中的 pack 文件的问题
•	修复 pointer 文件中存在类似 \t 空白字符导致的检出错误
•	修复 git-lfs 因为 ABI 兼容问题导致解析域名失败的问题
•	修复 url.insteadof 配置对黄绿区代理无效的问题
SHA1 哈希值	下载链接
d9ab80fc7a240203e3358ed20eae9d25dda68d40	git-lfs-darwin-386-v2.8.0.p1.tar.gz

e350ce31663636f3e525ed5c5b554f2af32c5f30	git-lfs-darwin-amd64-v2.8.0.p1.tar.gz

f21fdfca214e6cf6d833780d43b74784760ee458	git-lfs-freebsd-386-v2.8.0.p1.tar.gz

fd858e1009e3d38073a58e6402af1e6e5eb43050	git-lfs-freebsd-amd64-v2.8.0.p1.tar.gz

41a6df8176dc616b0c3ced6096c2a702e3edc84b	git-lfs-linux-386-v2.8.0.p1.tar.gz

d82d873def7fa2b5ba11622bee96b5246144cf8d	git-lfs-linux-amd64-v2.8.0.p1.tar.gz

e1e9544cd4c55fa68a9755412201bdbdb12529f5	git-lfs-linux-arm64-v2.8.0.p1.tar.gz

c43ad2ef236e3a4cd617dd83844f8107a9650ed9	git-lfs-v2.8.0.p1.tar.gz

fd6bbfa929991b437d5eb347a2bbe73d566a3b33	git-lfs-windows-386-v2.8.0.p1.zip

1262233d5219f1f5b320e52657bf509dc183741b	git-lfs-windows-amd64-v2.8.0.p1.zip

3.2.2 安装 git-lfs
1.	前提：
o	Git
确认已经安装了 Git，且需要 1.8.2 或更高版本的 Git。这是因为小于 1.8.2 版本的 Git 不支持 pre-push 钩子，导致 git push 命令不能将本地二进制文件推送到 Git-LFS 存储服务器。
   $ git version
o	TortoiseGit
如果经常使用TortoiseGit，请确保安装最新的2.0.0版本(或以上)，之前的版本存在一个Bug，导致使用Git-LFS时可能遇到提交失败的情况。下载地址：https://tortoisegit.org/download/。
具体参考ISSUE: https://gitlab.com/tortoisegit/tortoisegit/issues/2668
2.	下载：选择适合平台的正确版本，解开压缩包。
3.	对于 Linux 平台，执行 install.sh 将 git-lfs 自动复制到路径 /usr/bin 下。
如果之前手动将老版本的 git-lfs 使用whereis git-lfs ，查找git-lfs位置然后手工删除老版本的 git-lfs。
4.	对于 Windows 平台，将 git-lfs-windows-amd64.exe 或者 git-lfs-windows-386.exe 复制到 GIT安装目录\usr\bin\git-lfs.exe (替换git默认安装的git-lfs.exe）。
3.2.3 初始化 git-lfs（一次性操作）
安装完毕后，执行下面命令完成初始化：
$ git lfs install
这个命令会自动修改用户主目录下的 .gitconfig 配置文件（即 ~/.gitconfig），添加 Git-LFS 的过滤器启动（filter driver）配置。
查看 ~/.gitconfig ，如果显示 lfs 过滤器的信息则表明正确初始化了 lfs：
$ cat ~/.gitconfig
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
至此就完成了 git-lfs 的安装和设置。
  如果 git lfs install 提示报错，可以先执行 git lfs uninstall 后再次执行。
4. 项目管理者（或者开发者）如何对需要用 Git-LFS 管理的文件进行标记呢？
Git 并不能代替用户去判断哪些文件应该放在仓库里面，哪些文件不适合放在仓库里面，而是需要靠用户通过配置文件来指定。这个配置文件就是仓库中检入的 .gitattributes 文件。
Git-LFS 是通过 Git 属性文件来识别哪些文件用 git-lfs 来管理。不过如果你不了解 .gitattributes 属性文件也没有关系。Git-LFS提供了简单的命令。
例如当前工作区有一个文件 foo.pdf 较大，例如大于50M, 如果想将这个文件通过Git-LFS来管理。使用如下命令进行标记：
$ git lfs track foo.pdf
Tracking foo.pdf
执行此命令后工作区会生成一个 .gitattributes 属性文件，内容如下：
$ cat .gitattributes
foo.pdf filter=lfs diff=lfs merge=lfs -text
将这个属性文件和被追踪的文件 foo.pdf 一并提交到仓库：
$ git add .gitattributes foo.pdf
$ git commit -s -m "git-lfs: track foo.pdf"
则这个文件 foo.pdf 会自动由 Git-LFS 进行管理。
 
$sh 1.sh 添加相应的文件
$sh 2.sh 保存到本地
注意: 建议将大文件通过Git-LFS管理，如需要找出仓库内大于50M的文件，在Git仓根目录执行如下命令：
$ find ./ -path "./.git" -prune -o -type f -size +50M -print | cut -b 3-
然后执行之前所述命令将大文件添加到Git-LFS即可。
5. 执行普通的 Git 操作，二进制文件自动上传下载到 Git-LFS 服务器中
检查文件是否正确转换为Git-LFS:
执行 git lfs ls-files 命令能输出文件的 oid 信息
$ git lfs ls-files -l
ec19e2d68fb3a44242b99555479d9886876dc54d8e1950b7f3639a6545ed961d * foo.pdf
执行 git show 能输出文件的Git-LFS链接文件的内容, Git-LFS链接文件包含 version, oid 和 size 三个信息
$ git show HEAD:foo.pdf
version https://git-lfs.github.com/spec/v1
oid sha256:ec19e2d68fb3a44242b99555479d9886876dc54d8e1950b7f3639a6545ed961d
size 3780462
则表明正确将文件转换为Git-LFS管理。
向服务器推送（注意下面命令的第一行输出就是 git-lfs 推送数据的输出）：
$ git push origin master
Git LFS: (1 of 1 files) 758 B / 758 B
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 390 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To git@rnd-isourceb.huawei.com:p00297972/online_lfs.git
   edbccce..f2c1eed  master -> master
6. 如何确认某个文件在 Git 仓库中保存的是 LFS 连接，而非二进制数据呢？
执行下面命令，可以看到提交到仓库中的 foo.pdf 并不包含本身的二进制数据，而是一个连接。我们称这个文本链接为 LFS-Link。
$ git log -p foo.pdf
commit 68e6460aa8d61b796bf48c5d8d6225e9f49feea1
Author: Jiang Xin <jiangxin10@huawei.com>
Date:   Tue Nov 24 20:06:16 2015 +0800

    Add foo.pdf via git-lfs

diff --git a/foo.pdf b/foo.pdf
new file mode 100644
index 0000000..477de6a
--- /dev/null
+++ b/foo.pdf
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:ec19e2d68fb3a44242b99555479d9886876dc54d8e1950b7f3639a6545ed961d
+size 3780462
那么工作区的 foo.pdf 是正确的文件么？通过下面命令，我们可以看到工作区中的 foo.pdf 文件的确是完整的原始文件：
$ ls -l foo.pdf
-rw-rw-r--+ 1 jiangxin jiangxin 3780462 11月 24 19:48 foo.pdf


